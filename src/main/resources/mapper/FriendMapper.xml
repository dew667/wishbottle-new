<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hust13.wishbottle.mapper.FriendMapper" >
  <resultMap id="BaseResultMap" type="com.hust13.wishbottle.entity.Friend" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="mine_id" property="mineId" jdbcType="INTEGER" />
    <result column="friend_id" property="friendId" jdbcType="INTEGER" />
  </resultMap>

  <!--映射FriendVO-->
  <resultMap id="ConcernResultMap" type="com.hust13.wishbottle.model.vo.ConcernVO">
    <id column="concern_id" property="id" jdbcType="INTEGER" />
    <result column="concern_mine_id" property="mineId" jdbcType="INTEGER" />
    <result column="concern_friend_id" property="friendId" jdbcType="INTEGER" />
    <result column="concern_status" property="status" jdbcType="INTEGER"/>
    <association property="user" javaType="User" columnPrefix="user_">
      <id column="id" property="id" jdbcType="INTEGER" />
      <result column="name" property="name" jdbcType="VARCHAR" />
      <result column="avatar" property="avatar" jdbcType="VARCHAR" />
      <result column="gender" property="gender" jdbcType="INTEGER" />
      <result column="age" property="age" jdbcType="INTEGER" />
      <result column="signature" property="signature" jdbcType="VARCHAR" />
      <result column="city" property="city" jdbcType="VARCHAR" />
      <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
      <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
      <result column="ban" property="ban" jdbcType="INTEGER" />
      <result column="my_pic" property="myPic" jdbcType="VARCHAR" />
    </association>
  </resultMap>

  <sql id="Base_Column_List" >
    id, mine_id, friend_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from friend
    where id = #{id,jdbcType=INTEGER}
  </select>
  <!--判断表中是否已存在对应条目-->
  <select id="ifExist" parameterType="HashMap" resultType="java.lang.Integer">
    select count(*)
    from friend
    where mine_id=#{mineId} and friend_id=#{friendId}
  </select>
  <!--查询所有我关注的用户-->
  <select id="searchAllIConcern" resultMap="ConcernResultMap" parameterType="java.lang.Integer">
    select f.id as concern_id,
    f.status as concern_status,
    u.id as user_id,
    u.avatar as user_avatar,
    u.gender as user_gender,
    u.name as user_name
    from (
      select distinct T1.id,T1.mine_id,T1.friend_id,if(T1.friend_id=T2.mine_id,2,1) as `status`
      from (select * from friend where mine_id = #{mineId}) as T1
      left join (select * from friend where friend_id =#{mineId}) as T2
      on T1.mine_id=T2.friend_id
      where T1.friend_id in (select mine_id from friend where friend_id =#{mineId}) and T1.friend_id=T2.mine_id
      or T1.friend_id not in (select mine_id from friend where friend_id =#{mineId})
	) f
	inner join user u on f.friend_id=u.id
  </select>
  <!--查询我的粉丝-->
  <select id="searchAllConcernMe" resultMap="ConcernResultMap" parameterType="java.lang.Integer">
    select f.id as concern_id,
    f.status as concern_status,
    u.id as user_id,
    u.avatar as user_avatar,
    u.gender as user_gender,
    u.name as user_name
    from (
		select distinct T1.id, T1.friend_id,T1.mine_id,if(T1.mine_id=T2.friend_id,2,1) as `status`
		from (select * from friend where friend_id = #{mineId}) as T1
		left join (select * from friend where mine_id = #{mineId}) as T2
		on T1.friend_id=T2.mine_id
		where T1.mine_id in (select friend_id from friend where mine_id=#{mineId}) and T1.mine_id = T2.friend_id
		or T1.mine_id not in (select friend_id from friend where mine_id=#{mineId})
	) f
    inner join user u on f.mine_id=u.id
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from friend
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <!--取消关注某一用户-->
  <delete id="deleteByFriendItem" parameterType="Friend" >
    delete from friend
    where mine_id=#{mineId}
    and friend_id=#{friendId}
  </delete>
  <insert id="insert" parameterType="com.hust13.wishbottle.entity.Friend" >
    insert into friend (id, mine_id, friend_id
      )
    values (#{id,jdbcType=INTEGER}, #{mineId,jdbcType=INTEGER}, #{friendId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hust13.wishbottle.entity.Friend" useGeneratedKeys="true" keyProperty="id">
    insert into friend
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="mineId != null" >
        mine_id,
      </if>
      <if test="friendId != null" >
        friend_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="mineId != null" >
        #{mineId,jdbcType=INTEGER},
      </if>
      <if test="friendId != null" >
        #{friendId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hust13.wishbottle.entity.Friend" >
    update friend
    <set >
      <if test="mineId != null" >
        mine_id = #{mineId,jdbcType=INTEGER},
      </if>
      <if test="friendId != null" >
        friend_id = #{friendId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hust13.wishbottle.entity.Friend" >
    update friend
    set mine_id = #{mineId,jdbcType=INTEGER},
      friend_id = #{friendId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--判断是否关注某一用户-->
  <select id="isConcernOneUser" parameterType="HashMap" resultType="java.lang.Integer">
    select count(*)
    from friend
    where mine_id=#{mineId} and friend_id=#{userId}
  </select>

  <!--获取推荐用户-->
  <select id="getRecommend" resultType="User" parameterType="java.lang.Integer">
    select u.id, u.name, u.avatar, u.gender
    from user u
    inner join (
        select user_id, count(*) as tag_num
        from tag_user
        where tag_id in(
            select tag_id
            from tag_user
            where user_id=#{mineId}
        )
        and user_id!=#{mineId} and user_id not in (
          select friend_id
          from friend
          where mine_id=#{mineId}
        )
        group by user_id
    ) t on u.id=t.user_id
    order by t.tag_num desc limit 8
  </select>

  <!--随机推荐用户-->
  <select id="getRandUsers" resultType="User" parameterType="java.lang.Integer">
    select id, name, avatar, gender
    from user
    where id!=#{mineId}
    order by rand() limit 8
  </select>
</mapper>